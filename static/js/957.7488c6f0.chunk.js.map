{"version":3,"file":"static/js/957.7488c6f0.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","redux/filter/selectors.js","components/ScrollButton/ScrollButton.styled.js","components/ScrollButton/ScrollButton.js","webpack://goit-react-hw-08-phonebook/./src/components/Contactslist/ContactsList.module.css?aca5","webpack://goit-react-hw-08-phonebook/./src/components/ContactsListElement/ContactsListElement.module.css?a404","components/ContactsListElement/ContactsListElement.js","components/Contactslist/ContactsList.js","pages/Phonebook/Phonebook.js","styled/Form.js","styled/Input.js","styled/LabelContainer.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"ContactForm_formBox__cXiHe\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { doubledContactNotification, addedContactNotification } from 'utils/notifications';\nimport Button from 'styled/Button';\nimport Input from 'styled/Input';\nimport LabelContainer from 'styled/LabelContainer';\nimport Form from 'styled/Form';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    if (isContact) {\n      doubledContactNotification(form.name.value);\n    }\n    if (!isContact) {\n      dispatch(\n        addContact({\n          name: form.name.value,\n          number: form.number.value,\n        })\n      );\n      addedContactNotification(form.name.value);\n    }\n    form.reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <Form className={css.formBox} onSubmit={handleSubmit}>\n      <LabelContainer>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </LabelContainer>\n      <LabelContainer>\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <Input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </LabelContainer>\n      <Button type=\"submit\" name=\"submit\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport Input from 'styled/Input';\nimport LabelContainer from 'styled/LabelContainer';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <LabelContainer>\n        <label htmlFor={filterId}>Find contacts</label>\n        <Input\n          id={filterId}\n          type=\"search\"\n          placeholder=\"Enter name\"\n          onChange={event => handleChange(event)}\n        />\n      </LabelContainer>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return [...contacts].sort((a, b) => { return a.name.localeCompare(b.name) }).filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  position: fixed;\n  width: 100%;\n  left: 50%;\n  bottom: 40px;\n  height: 20px;\n  font-size: 3rem;\n  z-index: 25;\n  cursor: pointer;\n  color: rgba(55, 0, 201, 0.5);\n`;\n","import React, { useState } from 'react';\nimport { FaArrowCircleUp } from 'react-icons/fa';\nimport { Button } from './ScrollButton.styled';\n\nconst ScrollButton = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisible = () => {\n    const scrolled = document.documentElement.scrollTop;\n    if (scrolled > 100) {\n      setVisible(true);\n    } else if (scrolled <= 100) {\n      setVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  window.addEventListener('scroll', toggleVisible);\n\n  return (\n    <Button>\n      <FaArrowCircleUp\n        onClick={scrollToTop}\n        style={{ display: visible ? 'inline' : 'none' }}\n      />\n    </Button>\n  );\n};\n\nexport default ScrollButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__yMwqD\",\"title\":\"ContactsList_title__wh79s\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactLi\":\"ContactsListElement_contactLi__hD61T\",\"contact\":\"ContactsListElement_contact__Z6sFs\",\"buttonDel\":\"ContactsListElement_buttonDel__FjcSY\"};","import React from 'react';\nimport css from './ContactsListElement.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { FaTrashAlt } from 'react-icons/fa';\n\nconst ContactsListElement = ({ contact }) => {\n  const dispatch = useDispatch();\n  function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }\n\n  const handleClick = () => {\n    Notiflix.Confirm.show(\n      'Please confirm',\n      `Are you sure to delete ${contact.name}?`,\n      'Yes',\n      'No',\n      function okCb() {\n        dispatch(deleteContact(contact.id));\n      }\n    );\n  };\n\n  return (\n    <div className={css.contactLi}>\n      <p className={css.contact}>\n        <span\n          style={{ color: getRandomHexColor(), textShadow: '1px 1px black' }}\n        >\n          &#11047;\n        </span>{' '}\n        {contact.name}:\n      </p>\n      <p className={css.contact}>{contact.number}</p>\n      <button type=\"button\" className={css.buttonDel} onClick={handleClick}>\n      <FaTrashAlt />\n      </button>\n    </div>\n  );\n};\n\nContactsListElement.propTypes = {\n  contact: PropTypes.object,\n};\n\nexport default ContactsListElement;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../../redux/contacts/selectors.js';\nimport { selectFilteredContacts } from '../../redux/filter/selectors.js';\nimport Loader from '../../components/Loader/Loader.js';\nimport ScrollButton from 'components/ScrollButton/ScrollButton';\nimport css from './ContactsList.module.css';\nimport ContactsListElement from '../../components/ContactsListElement/ContactsListElement.js';\n\nconst ContactsList = () => {\n  const items = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div className={css.contactsListBox}>\n      <h4 className={css.title}>\n        You have {items.length} contact{items.length === 1 ? null : 's'}\n      </h4>\n      <ul className={css.contactsList}>\n        {!!isLoading && <Loader />}\n        {!!items &&\n          items.map(contact => (\n            <li key={contact.id}>\n              <ContactsListElement contact={contact} />\n            </li>\n          ))}\n        <ScrollButton />\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport { selectIsLoading, selectError } from '../../redux/contacts/selectors';\nimport Loader from '../../components/Loader/Loader';\nimport ContactsList from 'components/Contactslist/ContactsList';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n      {!!isLoading && !error && <Loader />}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 320px;\n  font-family: Coiny;\n  gap: 12px;\n  font-size: 20px;\n\n  @media screen and (min-width: 520px) {\n    & {\n      align-items: flex-start;\n    }\n  }\n`;\n\nexport default Form;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  min-width: 280px;\n  width: 100%;\n  height: 30px;\n  margin-bottom: 10px;\n  padding: 15px;\n  border-radius: 10px;\n  outline: none;\n  border: none;\n  color: rgb(89, 22, 153);\n  font-size: 20px;\n  caret-color: green;\n  border: 1px solid blue;\n\n  &::placeholder {\n    color: rgba(138, 43, 226, 0.3);\n  }\n`;\n\nexport default Input;\n","import styled from 'styled-components';\n\nconst LabelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: Coiny;\n  color: blue;\n  gap: 10px;\n  margin-top: 10px;\n  padding-left: 20px;\n`;\n\nexport default LabelContainer;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","_jsxs","Form","className","css","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","doubledContactNotification","addContact","number","addedContactNotification","reset","children","LabelContainer","_jsx","htmlFor","Input","id","type","placeholder","pattern","title","required","Button","filterId","onChange","setFilter","currentTarget","handleChange","selectFilteredContacts","createSelector","filter","_toConsumableArray","sort","a","b","localeCompare","contact","includes","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","visible","setVisible","window","addEventListener","scrolled","document","documentElement","scrollTop","FaArrowCircleUp","onClick","scrollTo","top","behavior","style","display","_ref","color","concat","Math","floor","random","toString","textShadow","Notiflix","deleteContact","FaTrashAlt","length","Loader","map","ContactsListElement","ScrollButton","Phonebook","useEffect","fetchContacts","_Fragment","Helmet","ContactForm","Filter","ContactsList"],"sourceRoot":""}